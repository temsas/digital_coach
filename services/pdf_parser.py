import PyPDF2
import re
import os
import logging
from database.db_connection import Database
from config import Config

logger = logging.getLogger(__name__)

class GuideParser:
    def __init__(self):
        self.db = Database()
        self.guide_files = Config.GUIDE_FILES
        self.guide_folder = Config.GUIDE_FOLDER
        
    def parse_all_guides(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –í–°–ï–• —É—á–µ–±–Ω–∏–∫–æ–≤"""
        total_sections = 0
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.db.clear_guide_data()
        
        for guide_file in self.guide_files:
            guide_path = os.path.join(self.guide_folder, guide_file)
            
            if not os.path.exists(guide_path):
                logger.warning(f"‚ö†Ô∏è –£—á–µ–±–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {guide_path}")
                continue
                
            sections_count = self.parse_single_guide(guide_path, guide_file)
            total_sections += sections_count
            logger.info(f"‚úÖ –£—á–µ–±–Ω–∏–∫ {guide_file} —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {sections_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        logger.info(f"üéâ –í—Å–µ–≥–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ —É—á–µ–±–Ω–∏–∫–æ–≤: {len(self.guide_files)}, —Ä–∞–∑–¥–µ–ª–æ–≤: {total_sections}")
        return total_sections

    def parse_single_guide(self, guide_path, guide_name):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞"""
        try:
            with open(guide_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                total_pages = len(pdf_reader.pages)
                sections_count = 0

                logger.info(f"üìÑ –ü–∞—Ä—Å–∏–Ω–≥ —É—á–µ–±–Ω–∏–∫–∞ {guide_name}: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")

                for page_num in range(total_pages):
                    page = pdf_reader.pages[page_num]
                    page_text = page.extract_text()
                    
                    if page_text and page_text.strip():
                        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
                        cleaned_text = self._clean_page_text(page_text, page_num + 1, guide_name)
                        
                        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        section_title = f"{guide_name} - –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}"
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É—á–µ–±–Ω–∏–∫–∞
                        self.db.save_guide_section(
                            title=section_title,
                            content=cleaned_text,
                            page=page_num + 1,
                            category=guide_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                            guide_source=guide_name  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                        )
                        sections_count += 1
                        
                        if (page_num + 1) % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü
                            logger.info(f"üìñ {guide_name}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {page_num + 1}/{total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")

                logger.info(f"‚úÖ {guide_name} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {sections_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
                return sections_count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—á–µ–±–Ω–∏–∫–∞ {guide_name}: {e}")
            return 0

    def _clean_page_text(self, text: str, page_num: int, guide_name: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ä–∞–∑–Ω—ã—Ö —É—á–µ–±–Ω–∏–∫–æ–≤"""
        if not text.strip():
            return ""
            
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        # –£–±–∏—Ä–∞–µ–º —è–≤–Ω—ã–π –º—É—Å–æ—Ä (–Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü, –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è)
        lines = text.split('. ')
        cleaned_lines = []
        
        for line in lines:
            line = line.strip()
            # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü)
            if line.isdigit() and len(line) < 4:
                continue
            # –£–±–∏—Ä–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Å–º—ã—Å–ª–∞
            if len(line) > 15 and not self._is_garbage_line(line, page_num, guide_name):
                cleaned_lines.append(line)
        
        result = '. '.join(cleaned_lines)
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã
        if len(result) < 50:
            return text[:1500]
            
        return result[:2000]

    def _is_garbage_line(self, line: str, page_num: int, guide_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É—Å–æ—Ä–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏"""
        if not line or len(line) < 3:
            return True
            
        # –¢–æ–ª—å–∫–æ —è–≤–Ω—ã–π –º—É—Å–æ—Ä
        garbage_indicators = [
            '–æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', 'contents', '–≥–ª–∞–≤–∞',
            'chapter', 'page', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞'
        ]
        
        line_lower = line.lower()
        if any(indicator in line_lower for indicator in garbage_indicators):
            return True
            
        if line.isdigit() and int(line) in [page_num, page_num - 1, page_num + 1]:
            return True
            
        return False

    def get_guide_content_for_training(self, max_sections: int = 20):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –í–°–ï–• —É—á–µ–±–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        sections = self.db.get_guide_sections(limit=max_sections)
        
        if not sections:
            return ""

        content = "–°–û–î–ï–†–ñ–ê–ù–ò–ï –í–°–ï–• –£–ß–ï–ë–ù–ò–ö–û–í –ü–û –¶–ò–§–†–û–í–û–ô –ì–†–ê–ú–û–¢–ù–û–°–¢–ò:\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—á–µ–±–Ω–∏–∫–∞–º
        guides_content = {}
        for section in sections:
            guide_name = section.get('guide_source', 'unknown')
            if guide_name not in guides_content:
                guides_content[guide_name] = []
            guides_content[guide_name].append(section)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ —É—á–µ–±–Ω–∏–∫–∞–º
        for guide_name, guide_sections in guides_content.items():
            content += f"=== –£–ß–ï–ë–ù–ò–ö: {guide_name.upper()} ===\n\n"
            
            for section in guide_sections[:5]:  # –ë–µ—Ä–µ–º –ø–æ 5 —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞
                title = section['section_title']
                section_content = section['section_content']
                
                content += f"--- {title} ---\n"
                content += f"{section_content}\n\n"
            
            content += "="*60 + "\n\n"

        logger.info(f"üìö –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ {len(guides_content)} —É—á–µ–±–Ω–∏–∫–æ–≤: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        return content

    def check_guides_exist(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —É—á–µ–±–Ω–∏–∫–æ–≤"""
        results = {}
        for guide_file in self.guide_files:
            guide_path = os.path.join(self.guide_folder, guide_file)
            exists = os.path.exists(guide_path)
            results[guide_file] = exists
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ–±–Ω–∏–∫–∞ {guide_file}: {exists}")
        
        return results