import PyPDF2
import re
import os
import logging
from database.db_connection import Database
from config import Config

logger = logging.getLogger(__name__)

class GuideParser:
    def __init__(self):
        self.db = Database()
        self.guide_path = os.path.join(Config.GUIDE_FOLDER, "digital_literacy_guide.pdf")
        logger.info(f"üîç –ü—É—Ç—å –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É: {os.path.abspath(self.guide_path)}")

    def parse_guide_pdf(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –í–°–ï–ì–û —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"""
        
        if not os.path.exists(self.guide_path):
            logger.error(f"‚ùå –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {self.guide_path}")
            return 0

        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.db.clear_guide_data()

            with open(self.guide_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                total_pages = len(pdf_reader.pages)
                sections_count = 0

                logger.info(f"üìÑ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")

                # –ü–∞—Ä—Å–∏–º –í–°–ï —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                for page_num in range(total_pages):
                    page = pdf_reader.pages[page_num]
                    page_text = page.extract_text()
                    
                    if page_text and page_text.strip():
                        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
                        cleaned_text = self._clean_page_text(page_text, page_num + 1)
                        
                        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        section_title = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}"
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                        self.db.save_guide_section(
                            title=section_title,
                            content=cleaned_text,
                            page=page_num + 1,
                            category='page'
                        )
                        sections_count += 1
                        
                        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤)")

                logger.info(f"üéâ PDF –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {sections_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
                return sections_count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞: {e}")
            return 0

    def _clean_page_text(self, text: str, page_num: int) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        if not text.strip():
            return ""
            
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        # –£–¥–∞–ª—è–µ–º —è–≤–Ω—ã–π –º—É—Å–æ—Ä (–Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ)
        lines = text.split('. ')
        cleaned_lines = []
        
        for line in lines:
            line = line.strip()
            # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü)
            if line.isdigit() and len(line) < 4:
                continue
            # –£–±–∏—Ä–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Å–º—ã—Å–ª–∞
            if len(line) > 10:
                cleaned_lines.append(line)
        
        result = '. '.join(cleaned_lines)
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        if len(result) < 50:
            return text[:1000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            
        return result[:2000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É

    def _is_garbage_line(self, line: str, page_num: int) -> bool:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É—Å–æ—Ä"""
        if not line or len(line) < 3:
            return True
            
        # –¢–æ–ª—å–∫–æ —è–≤–Ω—ã–π –º—É—Å–æ—Ä
        if line.isdigit() and int(line) in [page_num, page_num - 1, page_num + 1]:
            return True
            
        return False

    def get_guide_content_for_training(self, max_sections: int = 15):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        sections = self.db.get_guide_sections(limit=max_sections)
        
        if not sections:
            return ""

        content = "–û–ß–ò–©–ï–ù–ù–û–ï –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –¶–ò–§–†–û–í–û–ô –ì–†–ê–ú–û–¢–ù–û–°–¢–ò:\n\n"
        for section in sections:
            title = section['section_title']
            section_content = section['section_content']
            
            content += f"=== {title} ===\n"
            content += f"{section_content}\n"
            content += "="*50 + "\n\n"

        logger.info(f"üìö –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –æ—á–∏—â–µ–Ω–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        return content

    def check_guide_exists(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"""
        exists = os.path.exists(self.guide_path)
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞: {self.guide_path} -> {exists}")
        return exists