import json
import logging
from database.db_connection import Database
from services.pdf_parser import GuideParser
from services.gigachat_service import GigaChatService

logger = logging.getLogger(__name__)

class TrainingGenerator:
    def __init__(self):
        self.db = Database()
        self.guide_parser = GuideParser()
        self.gigachat_available = False
        self.gigachat = None
        
        try:
            self.gigachat = GigaChatService()
            self.gigachat_available = True
            logger.info("‚úÖ GigaChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.gigachat = self._create_gigachat_stub()

    def _create_gigachat_stub(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è GigaChat –∫–æ–≥–¥–∞ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        class GigaChatStub:
            def generate_training_lessons(self, guide_content, num_lessons):
                return []
            
            def generate_simple_lesson(self, section_title, section_content):
                theory = section_content[:200] + "..." if len(section_content) > 200 else section_content
                
                return {
                    "lesson_title": section_title,
                    "theory_content": theory,
                    "question": f"–û —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ '{section_title}'?",
                    "options": [
                        "–û–± –æ—Å–Ω–æ–≤–∞—Ö —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º",
                        "–û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", 
                        "–û –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ",
                        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ"
                    ],
                    "correct_answer": 0,
                    "explanation": f"–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —É—á–µ–±–Ω–∏–∫–æ–≤ –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏.",
                    "difficulty_level": "beginner"
                }
        
        return GigaChatStub()

    def initialize_system(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è...")

        # –ü–∞—Ä—Å–∏–º –í–°–ï —É—á–µ–±–Ω–∏–∫–∏
        sections_count = self.guide_parser.parse_all_guides()
        
        if sections_count == 0:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —É—á–µ–±–Ω–∏–∫–∏")
            return False

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ä–æ–∫–∏
        if not self.generate_training_lessons():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫–∏")
            return False

        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True

    def generate_training_lessons(self, num_lessons: int = 10) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• —É—á–µ–±–Ω–∏–∫–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –í–°–ï–• —É—á–µ–±–Ω–∏–∫–æ–≤
            guide_content = self.guide_parser.get_guide_content_for_training()
            
            if not guide_content:
                logger.error("‚ùå –ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—á–µ–±–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–æ–≤")
                return False

            lessons_data = []

            if self.gigachat_available:
                logger.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ GigaChat...")
                lessons_data = self.gigachat.generate_training_lessons(guide_content, num_lessons)
                if lessons_data:
                    logger.info(f"‚úÖ GigaChat —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(lessons_data)} —É—Ä–æ–∫–æ–≤")
                else:
                    logger.warning("‚ö†Ô∏è GigaChat –Ω–µ –≤–µ—Ä–Ω—É–ª —É—Ä–æ–∫–∏")
            
            # –ï—Å–ª–∏ GigaChat –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —É—Ä–æ–∫–∏
            if not lessons_data:
                logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–¥–µ–ª–æ–≤...")
                lessons_data = self._generate_simple_lessons(num_lessons)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–∫–∏ –≤ –ë–î
            for lesson in lessons_data:
                lesson_data = {
                    'lesson_title': lesson['lesson_title'],
                    'theory_content': lesson['theory_content'],
                    'question': lesson['question'],
                    'options_json': json.dumps(lesson['options']),
                    'correct_answer': lesson['correct_answer'],
                    'explanation': lesson['explanation'],
                    'difficulty_level': lesson.get('difficulty_level', 'beginner')
                }
                self.db.save_training_lesson(lesson_data)

            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(lessons_data)} —É—Ä–æ–∫–æ–≤")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–æ–≤: {e}")
            return False

    def _generate_simple_lessons(self, num_lessons: int) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –í–°–ï–• —É—á–µ–±–Ω–∏–∫–æ–≤"""
        sections = self.db.get_guide_sections(limit=num_lessons)
        lessons = []

        logger.info(f"üìö –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –∏–∑ {len(sections)} —Ä–∞–∑–¥–µ–ª–æ–≤...")
        
        for section in sections:
            lesson = self.gigachat.generate_simple_lesson(
                section['section_title'], 
                section['section_content']
            )
            lessons.append(lesson)

        return lessons

    def get_training_data(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏–∑ –í–°–ï–• —É—á–µ–±–Ω–∏–∫–æ–≤"""
        lessons = self.db.get_training_lessons(limit=10)
        
        if not lessons:
            logger.warning("‚ùå –ù–µ—Ç —É—Ä–æ–∫–æ–≤ –≤ –ë–î, –ø—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å...")
            if self.initialize_system():
                lessons = self.db.get_training_lessons(limit=10)

        training_data = []
        for lesson in lessons:
            training_data.append({
                'id': lesson['id'],
                'theory': lesson['theory_content'],
                'test': {
                    'question': lesson['question'],
                    'options': json.loads(lesson['options_json']),
                    'correct_answer': lesson['correct_answer'],
                    'explanation': lesson['explanation']
                }
            })

        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(training_data)} —É—Ä–æ–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        return training_data

    def check_guides_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –í–°–ï–• —É—á–µ–±–Ω–∏–∫–æ–≤"""
        results = self.guide_parser.check_guides_exist()
        return all(results.values())