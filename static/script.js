// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let isProcessing = false;
let currentQuiz = null;
let currentFullTest = null;
let currentQuestionIndex = 0;
let userTestAnswers = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log("üéì –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    focusInput();
});

// –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
function focusInput() {
    const input = document.getElementById('messageInput');
    if (input) {
        input.focus();
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–¥–∏–Ω —É—Ä–æ–∫)
async function sendMessage() {
    if (isProcessing) return;
    
    const input = document.getElementById('messageInput');
    const message = input.value.trim();
    
    if (!message) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è');
        return;
    }

    isProcessing = true;
    updateUIForProcessing(true);
    
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        addMessageToChat('user', `–•–æ—á—É –∏–∑—É—á–∏—Ç—å —Ç–µ–º—É: "${message}"`);
        input.value = '';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É textarea
        input.style.height = 'auto';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/api/learn-topic', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                topic: message
            })
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∞
            addMessageToChat('bot', data.explanation);
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        addMessageToChat('bot', '‚ùå ' + (error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'));
    } finally {
        isProcessing = false;
        updateUIForProcessing(false);
        focusInput();
    }
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é updateUIForProcessing –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
function updateUIForProcessing(processing, message = '') {
    const sendBtn = document.getElementById('sendBtn');
    const input = document.getElementById('messageInput');
    const statusSection = document.getElementById('statusSection');
    const statusMessage = document.getElementById('statusMessage');
    
    if (processing) {
        sendBtn.disabled = true;
        sendBtn.textContent = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...';
        input.disabled = true;
        
        statusMessage.textContent = message || 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –≥–æ—Ç–æ–≤–ª—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...';
        statusSection.style.display = 'block';
    } else {
        sendBtn.disabled = false;
        sendBtn.textContent = '–ò–∑—É—á–∏—Ç—å —Ç–µ–º—É';
        input.disabled = false;
        statusSection.style.display = 'none';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç (–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function addMessageToChat(sender, content) {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    
    messageDiv.className = `message ${sender}-message`;
    
    if (sender === 'bot') {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞
        const formattedContent = formatBotMessage(content);
        messageDiv.innerHTML = `
            <div class="message-content">
                <div class="message-header">
                    <strong>–ü–æ–º–æ—â–Ω–∏–∫:</strong>
                </div>
                <div class="message-text">${formattedContent}</div>
            </div>
        `;
    } else {
        messageDiv.innerHTML = `
            <div class="message-content">
                <div class="message-header">
                    <strong>–í—ã:</strong>
                </div>
                <div class="message-text">${escapeHtml(content)}</div>
            </div>
        `;
    }
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function formatBotMessage(text) {
    let safeText = escapeHtml(text);
    let formatted = safeText
        .replace(/^(.*?:)$/gm, '<div class="message-subtitle">$1</div>')
        .replace(/^(\d+\.\s+.*)$/gm, '<div class="list-item numbered">$1</div>')
        .replace(/^([-‚Ä¢*]\s+.*)$/gm, '<div class="list-item bulleted">$1</div>')
        .replace(/\*\*(.*?)\*\*/g, '<span class="highlight">$1</span>');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
    formatted = autoNumberLists(formatted);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    return formatted.split('\n\n')
        .map(paragraph => paragraph.trim() ? 
            (paragraph.includes('class="') ? paragraph : `<p>${paragraph}</p>`) : '')
        .join('')
        .replace(/\n/g, '<br>');
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function focusInput() {
    const input = document.getElementById('messageInput');
    if (input) {
        input.focus();
    }
}

function autoNumberLists(formattedText) {
    let numberedText = formattedText;
    let listCounter = 0;
    
    // –ù—É–º–µ—Ä—É–µ–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    numberedText = numberedText.replace(/<div class="list-item numbered">(\d+\.\s+.*?)<\/div>/g, 
        function(match, content) {
            listCounter++;
            return `<div class="list-item numbered" data-number="${listCounter}">${content.replace(/^\d+\.\s+/, '')}</div>`;
        }
    );
    
    return numberedText;
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
async function startFullTest(topic) {
    if (isProcessing) return;

    isProcessing = true;
    updateUIForProcessing(true, `–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç –∏–∑ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ "${topic}"...`);

    try {
        const response = await fetch('/api/generate-full-test', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                topic: topic
            })
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            currentFullTest = data.test_data;
            userTestAnswers = new Array(currentFullTest.questions.length).fill(null);
            currentQuestionIndex = 0;
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω —Ç–µ—Å—Ç–∞
            showFullTestScreen();
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:', error);
        alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        isProcessing = false;
        updateUIForProcessing(false);
    }
}



// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
function showFullTestScreen() {
    document.getElementById('chatScreen').classList.remove('active');
    document.getElementById('fullTestScreen').classList.add('active');
    document.getElementById('fullTestScreen').style.display = 'block';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–æ—Ä–∏—é
    document.getElementById('theoryContent').innerHTML = currentFullTest.theory;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    showQuestion(0);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å
function showQuestion(index) {
    const questionsContainer = document.getElementById('testQuestions');
    questionsContainer.innerHTML = '';
    
    const question = currentFullTest.questions[index];
    
    const questionElement = document.createElement('div');
    questionElement.className = 'full-test-question';
    questionElement.innerHTML = `
        <div class="question-header">
            <h4>–í–æ–ø—Ä–æ—Å ${index + 1}</h4>
            <div class="question-text">${question.question}</div>
        </div>
        <div class="question-options">
            ${question.options.map((option, optIndex) => `
                <div class="question-option ${userTestAnswers[index] === optIndex ? 'selected' : ''}" 
                     onclick="selectTestAnswer(${index}, ${optIndex})">
                    <div class="option-number">${optIndex + 1}</div>
                    <div class="option-text">${option}</div>
                </div>
            `).join('')}
        </div>
    `;
    
    questionsContainer.appendChild(questionElement);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    updateProgress(index);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateNavigationButtons(index);
}

// –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ
function selectTestAnswer(questionIndex, answerIndex) {
    userTestAnswers[questionIndex] = answerIndex;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const options = document.querySelectorAll('.question-option');
    options.forEach(option => option.classList.remove('selected'));
    
    event.currentTarget.classList.add('selected');
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
    if (questionIndex === currentQuestionIndex) {
        document.getElementById('nextBtn').disabled = false;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgress(index) {
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');
    
    const progress = ((index + 1) / currentFullTest.questions.length) * 100;
    progressFill.style.width = `${progress}%`;
    progressText.textContent = `–í–æ–ø—Ä–æ—Å ${index + 1} –∏–∑ ${currentFullTest.questions.length}`; // –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "–∏–∑ 5"
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function updateNavigationButtons(index) {
    document.getElementById('prevBtn').disabled = index === 0;
    
    if (index === currentFullTest.questions.length - 1) {
        document.getElementById('nextBtn').style.display = 'none';
        document.getElementById('submitBtn').style.display = 'block';
    } else {
        document.getElementById('nextBtn').style.display = 'block';
        document.getElementById('submitBtn').style.display = 'none';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    document.getElementById('nextBtn').disabled = userTestAnswers[index] === null;
}

// –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
function nextQuestion() {
    if (currentQuestionIndex < currentFullTest.questions.length - 1) {
        currentQuestionIndex++;
        showQuestion(currentQuestionIndex);
    }
}

// –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
function prevQuestion() {
    if (currentQuestionIndex > 0) {
        currentQuestionIndex--;
        showQuestion(currentQuestionIndex);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
async function submitFullTest() {
    if (isProcessing) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã
    const unanswered = userTestAnswers.filter(answer => answer === null).length;
    if (unanswered > 0) {
        if (!confirm(`–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –û—Å—Ç–∞–ª–æ—Å—å ${unanswered} –±–µ–∑ –æ—Ç–≤–µ—Ç–∞. –í—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç?`)) {
            return;
        }
    }

    isProcessing = true;
    updateUIForProcessing(true, '–ü—Ä–æ–≤–µ—Ä—è—é –æ—Ç–≤–µ—Ç—ã...');

    try {
        const response = await fetch('/api/check-full-test', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user_answers: userTestAnswers,
                test_data: currentFullTest
            })
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            showResultsScreen(data);
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–∞:', error);
        alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ—Å—Ç–∞.');
    } finally {
        isProcessing = false;
        updateUIForProcessing(false);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
function showResultsScreen(results) {
    document.getElementById('fullTestScreen').classList.remove('active');
    document.getElementById('resultsScreen').classList.add('active');
    document.getElementById('resultsScreen').style.display = 'block';
    
    const scoreDisplay = document.getElementById('scoreDisplay');
    const resultsDetails = document.getElementById('resultsDetails');
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É
    scoreDisplay.innerHTML = `
        <div class="score-circle ${results.score >= 70 ? 'good' : results.score >= 50 ? 'average' : 'poor'}">
            <div class="score-value">${results.score}%</div>
            <div class="score-label">–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</div>
        </div>
        <div class="score-breakdown">
            <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <strong>${results.correct_count}</strong> –∏–∑ ${results.total_questions}</p>
        </div>
    `;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
     resultsDetails.innerHTML = `
        <h4>–î–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</h4>
        ${results.results.map((result, index) => `
            <div class="result-item ${result.is_correct ? 'correct' : 'incorrect'}">
                <div class="result-question">
                    <strong>–í–æ–ø—Ä–æ—Å ${index + 1} –∏–∑ 5:</strong> ${result.question}
                </div>
                <!-- –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ -->
            </div>
        `).join('')}
    `;
}


// –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
function goToMainScreen() {
    document.getElementById('resultsScreen').classList.remove('active');
    document.getElementById('resultsScreen').style.display = 'none';
    document.getElementById('chatScreen').classList.add('active');
    
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–∞
    currentFullTest = null;
    userTestAnswers = [];
    currentQuestionIndex = 0;
}

// –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
function retryTest() {
    if (currentFullTest) {
        userTestAnswers = new Array(currentFullTest.questions.length).fill(null);
        currentQuestionIndex = 0;
        
        document.getElementById('resultsScreen').classList.remove('active');
        document.getElementById('resultsScreen').style.display = 'none';
        document.getElementById('fullTestScreen').classList.add('active');
        
        showQuestion(0);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–∫ —Å —Ç–µ—Å—Ç–æ–º (–¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞)
function showQuizSection(quiz) {
    const quizSection = document.getElementById('quizSection');
    const quizQuestion = document.getElementById('quizQuestion');
    const quizOptions = document.getElementById('quizOptions');
    
    console.log("üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç:", quiz);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    quizQuestion.innerHTML = '';
    quizOptions.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    const questionElement = document.createElement('div');
    questionElement.className = 'question-text';
    questionElement.textContent = quiz.question;
    quizQuestion.appendChild(questionElement);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    quiz.options.forEach((option, index) => {
        const optionElement = document.createElement('div');
        optionElement.className = 'quiz-option';
        optionElement.innerHTML = `
            <div class="option-number">${index + 1}</div>
            <div class="option-text">${option}</div>
        `;
        optionElement.onclick = () => selectQuizAnswer(index, optionElement);
        quizOptions.appendChild(optionElement);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫
    quizSection.style.display = 'block';
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ç–µ—Å—Ç—É
    quizSection.scrollIntoView({ behavior: 'smooth' });
}

// –°–∫—Ä—ã—Ç—å –±–ª–æ–∫ —Å —Ç–µ—Å—Ç–æ–º
function hideQuizSection() {
    const quizSection = document.getElementById('quizSection');
    quizSection.style.display = 'none';
    currentQuiz = null;
}

// –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ (–æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å)
async function selectQuizAnswer(answerIndex, element) {
    if (!currentQuiz) return;
    
    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    document.querySelectorAll('.quiz-option').forEach(opt => {
        opt.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    element.classList.add('selected');
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–π –≤—ã–±–æ—Ä
    document.querySelectorAll('.quiz-option').forEach(opt => {
        opt.style.pointerEvents = 'none';
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
        const response = await fetch('/api/check-answer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                answer_index: answerIndex,
                quiz_data: currentQuiz
            })
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            showQuizResult(data.result, answerIndex);
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
        addMessageToChat('bot', '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞.');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ (–æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å)
function showQuizResult(result, selectedIndex) {
    const quizOptions = document.getElementById('quizOptions');
    const options = quizOptions.querySelectorAll('.quiz-option');
    
    // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    options.forEach((option, index) => {
        if (index === result.correct_answer) {
            option.classList.add('correct');
        } else if (index === selectedIndex && index !== result.correct_answer) {
            option.classList.add('incorrect');
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —á–∞—Ç
    addMessageToChat('bot', `
        <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> ${result.is_correct ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}<br><br>
        <strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong> ${result.explanation}
    `);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    const continueButton = document.createElement('button');
    continueButton.className = 'continue-btn';
    continueButton.textContent = '–ò–∑—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É ‚Üí';
    continueButton.onclick = () => {
        hideQuizSection();
        focusInput();
    };
    
    quizOptions.appendChild(continueButton);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessageToChat(sender, content) {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    
    messageDiv.className = `message ${sender}-message`;
    messageDiv.innerHTML = `
        <div class="message-content">
            <strong>${sender === 'user' ? '–í—ã' : '–ü–æ–º–æ—â–Ω–∏–∫'}:</strong> ${content}
        </div>
    `;
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
function updateUIForProcessing(processing, message = '') {
    const sendBtn = document.getElementById('sendBtn');
    const input = document.getElementById('messageInput');
    const statusSection = document.getElementById('statusSection');
    const statusMessage = document.getElementById('statusMessage');
    
    if (processing) {
        sendBtn.disabled = true;
        sendBtn.textContent = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...';
        input.disabled = true;
        
        statusMessage.textContent = message || 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –≥–æ—Ç–æ–≤–ª—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...';
        statusSection.style.display = 'block';
    } else {
        sendBtn.disabled = false;
        sendBtn.textContent = '–ò–∑—É—á–∏—Ç—å —Ç–µ–º—É';
        input.disabled = false;
        statusSection.style.display = 'none';
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter (–±–µ–∑ Shift)
document.getElementById('messageInput').addEventListener('keypress', function(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
    }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
document.getElementById('messageInput').addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = (this.scrollHeight) + 'px';
});

async function sendMessage() {
    if (isProcessing) return;
    
    const input = document.getElementById('messageInput');
    const message = input.value.trim();
    
    if (!message) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è');
        return;
    }

    isProcessing = true;
    updateUIForProcessing(true);
    
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        addMessageToChat('user', `–•–æ—á—É –∏–∑—É—á–∏—Ç—å —Ç–µ–º—É: "${message}"`);
        input.value = '';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/api/learn-topic', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                topic: message
            })
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∞
            addMessageToChat('bot', data.explanation);
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        addMessageToChat('bot', '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        isProcessing = false;
        updateUIForProcessing(false);
        focusInput();
    }
}